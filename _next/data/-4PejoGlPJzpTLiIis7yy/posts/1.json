{"pageProps":{"post":{"id":1,"contentHTML":"\n[Tailwind CSS](https://tailwindcss.com) is an amazing set of tools, including autocompletion, built-in wide used classnames and mixins etc, developed by talented people. This comes, however, with a great cost. It adds another layer of complexity on the top of frontend development process which is already quite complex.\n\n\n\n\nLet's take a look at **Advantages**:\n- Faster, comparing to maintaining native CSS, development.\n- No need to switch between layout and style files.\n- No (or almost no) cascades.\n- Developing design systems is a breath of fresh air. \n- No need to create omnipresent classes and mixins (same for every project). Good bye `sass`, `less` and alike.\n- Amazing error handling and autocompletion.\n- Unified developer-designer communication, everyone talks the same language (let's be honest, designers mostly don't know css which is fine)\n\nContext switching is hard. Having css in the same place as html is good. No context switching.\nWe don't have to search for global css rules/mixins/rules all over the place. [Config file](https://tailwindcss.com/docs/configuration) is the only entrypoint.\nOften used styles are grouped and named clearly with meaningful defaults.\n\n\n\n\nThere's not much to add to the strengths as they are pretty obvious and non negotiable. \nLet's list **weaknesses** which are: \n\n- Many CSS classes written in one line, each responsible for one or more property, can grow uncontrollably. \nSometimes they don't fit the screen.\n  \n  So, instead of regular \n  ```css\n    .chat-notification {\n        display: flex;\n        align-items: center;\n        max-width: 24rem;\n        margin: 0 auto;\n        padding: 1.5rem;\n        border-radius: 0.5rem;\n        background-color: #fff;\n        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n    }\n  ```\n  we're doing\n  ```html\n  <div class=\"p-6 max-w-sm mx-auto bg-white rounded-xl shadow-lg flex items-center space-x-4\" />\n  ```\n    This can be fixed by creating specfic classname in configuration file (whatever the syntax is)\n\n  ```js\n    module.exports = {\n        theme: {\n            chatNotification: {\n                // ...rules\n            },\n        },\n    };\n  ```\n\n  but then there is no difference with moving all rules under one classname in css file. \n\n- If we move tailwind classes outside of html layout, autocompletion and tailwind error handling is lost.  \n    Example:\n    ```jsx\n    // All good\n\n    <div class=\"p-6 max-w-sm mx-auto bg-white rounded-xl shadow-lg flex items-center space-x-4\" />\n    ```  \n\n    \n    ```jsx\n    // Error prone, so it's easy to mistype\n\n    const getClassNames = (options) => \"p-6 max-w-sm mx-auto bg-white rounded-xl shadow-lg flex items-center space-x-4\";\n    <div className={getClassNames(options)} />\n    ```  \n\n- Tailwind CSS doesn't usually add much CSS knowledge to the people using it.  \nAnd the derivation - a lot of CSS features, like grid, `:is`, `:where`, `:has` and [many others](https://developer.chrome.com/blog/new-in-web-ui-io-2024) are either hidden, abandoned or simply left behind the scenes.\n\nI would like to focus on the last point more closely here.\n\nI understand that cascades, inheritence, prioritization are complicated.\nThere are a lot of rules, sometimes inconsistent, sometimes just difficult to comprehend because of various reasons.\nThere is no error handling, you forget to add a semicolon and you get a blank screen. Not nice.\n\nIt seems like we're trying to write styles anywhere but where they belong to - css in js, jss, tailwind etc.\nThe only important parameter is development speed whatever other tradeoffs are. \n\nHistorically CSS was never complete and was always behind business and subsequently designer needs. \nMaybe exactly designers were the ones who pushed specifications the most for better. \n\nBut please name at least one technology that is perfect? There is none.\nCSS is almost perfect for styling web pages. I don't think it's ever possible to find more concise and expressive way for the language to describe how something should look like. Probably `yaml` would do better. But something similar can be easily achieved with [stylus](https://stylus-lang.com) (no advert) - an amazing tool at a time, clearly an underdog between css preprocessors.\n\nTailwind doesn't make person a better developer. It makes person somewhat faster developer.\nThis isn't the same. I consider utility approach taken by tailwind team harmful for the industry.\nSince `tailwind` became a standart, we probably don't even understand that bloated html is top of the iceberg.\nI wouldn't even mention separation of concerns here. Stating this makes me conservative dinosaur which I hope I am not.\n\nThere is literally one downside in not using tailwind these days - maintaining separate css files. This is a big issue for developers incuding myself. Mostly because time is money. Tools are important. \n\n### Conclusion\n\nCascades are complicated. Writing maintainable CSS is complicated. If we join this with\nCSS not even considered a proper language to make fun of - we get unmaintainable CSS.\n\nTailwind will evolve. Maybe it will be replaced by even better similar tool.  \nBut CSS will always be one step ahead. Utility first libraries are a thing of present.\nIt's not a thing of the future.\n\nUnlike good javascript frameworks that pushed native browser/javascript APIs for better, tailwind will have nothing to do with future of CSS and won't affect it.","title":"My thoughts on Tailwind CSS","published":true,"date":"2024-07-22 13:12:09"}},"__N_SSG":true}