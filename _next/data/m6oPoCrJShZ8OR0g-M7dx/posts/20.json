{"pageProps":{"post":{"id":20,"contentHTML":"<p>Оригинал <a href=\"https://medium.com/@dtinth/quickly-start-a-new-react-application-using-nwb-334db59691d9#.kg7qhz6sj\">здесь</a>.\n<a href=\"https://habrahabr.ru/post/279513/\">Перевод</a>.</p>\n<p>Написав несколько приложений на React, теперь уже довольно скучно каждый раз начинать всё сначала.\nМне нужно настроить webpack, webpack-dev-server, Babel с некоторыми пресетами и плагинами, Karma, React,\nнесколько лоадеров для JSON, CSS, картинок и шрифтов – и объединить всё это вместе.</p>\n<p>Альтернативой мог бы стать boilerplate, но многие из них содержат в себе кучу всего ненужного\n(роутер, Redux или сервер сайд рендеринг) и не покрывают некоторые нужные мне вещи\n(CSS-лоадеры, unit тестирование и т.д.). Не говоря уже о том, что разные проекты требуют различной конфигурации.</p>\n<p>Сегодня всё действительно быстро меняется и boilerplate устаревает достаточно быстро.\nПосле того, как вы создали приложение с использованием boilerplate, на вас ложится\nответственность содержать все зависимости в актуальном состоянии. Я обновлял\nзависимости для нескольких проектов и это требует довольно много туповатой, повторяющейся работы.</p>\n<p>Теперь я предпочитаю использовать <a href=\"https://github.com/insin/nwb\">nwb</a>.</p>\n<p><strong>Шаг 1</strong>. Устанавливаем nwb.</p>\n<p>{% highlight javascript %}\n$ npm install -g nwb\n{% endhighlight %}</p>\n<p><strong>Шаг 2</strong>. Используем команду nwb для создания нового приложения на React.</p>\n<p>{% highlight javascript %}\n$ nwb new react-app scoreboard\n{% endhighlight %}</p>\n<p><strong>Шаг 3</strong>. Заглядываем внутрь.</p>\n<p>{% highlight javascript %}\n$ cd scoreboard</p>\n<p>$ ls\nREADME.md     nwb.config.js   public   tests\nnode_modules  package.json    src\n{% endhighlight %}</p>\n<p>Здесь нет ни <strong>webpack.config.js</strong>, ни <strong>.babelrc</strong> или <strong>karma.conf.js</strong>.\nВсе настройки в <strong>nwb.config.js</strong>. Так что давайте посмотрим.</p>\n<p>{% highlight javascript %}\n$ cat nwb.config.js</p>\n<p>module.exports = { type: 'react-app' }\n{% endhighlight %}</p>\n<p>Конфигурация минимальна! Нам только нужно указать, что мы разрабатываем React-приложение\nи разумные настройки по умолчанию будут созданы.</p>\n<p><strong>package.json</strong></p>\n<p>{% highlight javascript %}\n$ cat package.json</p>\n<p>{\n\"name\": \"scoreboard\",\n\"version\": \"1.0.0\",\n\"description\": \"Describe scoreboard here\",\n\"private\": true,\n\"scripts\": {\n\"build\": \"nwb build\",\n\"clean\": \"nwb clean\",\n\"start\": \"nwb serve\",\n\"test\": \"nwb test\"\n},\n\"dependencies\": {\n\"react\": \"0.14.x\",\n\"react-dom\": \"0.14.x\"\n},\n\"devDependencies\": {\n\"nwb\": \"0.7.x\"\n},\n\"author\": \"\",\n\"license\": \"MIT\",\n\"repository\": \"\"\n}\n{% endhighlight %}</p>\n<p>Всё, что у нас в dependencies – это <strong>react</strong> и <strong>react-dom</strong>.\nВ devDependencies только <strong>nwb</strong>. Ни webpack, ни Karma или Babel – всё это менеджится nwb.\nСам по себе nwb содержит много тестов, чтобы быть уверенным, что все эти вещи вместе работают согласованно.</p>\n<p>Шаг 4. Запускаем сервер.</p>\n<p>{% highlight javascript %}\n$ npm start -- --auto-install</p>\n<p>[...]\nnwb: serve-react-app\nnwb: dev server listening at http://localhost:3001\nwebpack built a98e92c8c4d34bae8856 in 2791ms\n{% endhighlight %}</p>\n<p>Это запустит webpack-dev-server.\nПопробуйте поменять файлы. Вы увидите, что webpack и Babel уже настроены для hot-reload React-компонентов.\nПопробуйте заимпортить какой-нибудь npm-модуль, например:</p>\n<p>{% highlight javascript %}\nimport Rx from ‘rx’\n{% endhighlight %}</p>\n<p>Благодаря флагу <em>--auto-install</em> при сохранении файла установятся отсутствующие зависимости и добавятся в <strong>package.json</strong>.\nСоздайте и заимпортите CSS-файл. Webpack уже сконфигурирован и содержит правильный loader и autoprefixer.\nНастройка всего этого вручную заняла бы много времени.</p>\n<p><strong>Шаг 5</strong>. Запускаем тесты.</p>\n<p>{% highlight javascript %}\n$ npm test -- --server --coverage</p>\n<p>[...]\nSUMMARY:\n√ 1 test completed\n{% endhighlight %}</p>\n<p>Это запустит Karma, интергрированную с webpack и измерением покрытия тестов.\nС флагом <em>--server</em> тесты перезапускаются, когда вы сохраняете файл.\nС флагом <em>--coverage</em> будет создан репорт. Вы можете установить плагин для редактора, чтобы видеть, какие строки покрыты тестами, а какие – нет.</p>\n<p>Наконец, запускаем</p>\n<p>{% highlight javascript %}\n$ npm run build\n{% endhighlight %}</p>\n<p>Данная команда сгенерирует статические ассеты. JavaScript и CSS из <strong>node_modules</strong> пойдут в <strong>vendor.js</strong>\nи <strong>vendor.css</strong>, тогда как код приложения – в <strong>app.js</strong> и <strong>app.css</strong>. Source maps создадутся в отдельном файле <strong>.map</strong>.\nМожете потом загрузить их на ваш вэб-сервер.</p>\n<p>Я использовал nwb в нескольких проектах.\n<a href=\"https://medium.com/@dtinth/introducing-wonderstudio-db3d6755ca97#.k9jqztvus\">wonderstudio</a> с более ранней версией nwb.\nВ то время как конфигурация в nwb несколько ограничена, хотя это работает на 90% из коробки,\nмне нужно сделать хотфикс, чтобы конфигурировать webpack так, как мне хочется.\nАвтор nwb выразил свои намерения в <a href=\"https://twitter.com/jbscript/status/704943199425568769\">обеспечении большей гибкости в конфигурации</a>.</p>\n<p>Несколько последних написанных мной библиотек также используют nwb (например <a href=\"https://github.com/dtinth/redux-send\">redux-send</a> и <a href=\"https://github.com/taskworld/ave\">ave</a>).\nОн может генерировать UMD, CommonJS и ES6 версии модулей.</p>\n<p>Как видите, nwb можно использовать также для разработки, тестирования и\nбилдов вэб-приложений и библиотек на чистом JS или React-компонентов.</p>\n<p>На момент написания nwb использует Babel 5, но мне предстоит ещё поискать инструмент,\nкоторый настолько же хорошо выглядит и протестирован, как nwb. Встроенная поддержка\nunit-тестирования делает его для меня предпочительней других :D</p>\n","title":"Быстрый старт нового приложения на React с использованием nwb","published":false,"date":"2016-03-19 03:13:23"}},"__N_SSG":true}